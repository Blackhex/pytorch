<testsuites>
  <testsuite name="pytest" errors="0" failures="0" skipped="30" tests="572" time="37.230" timestamp="2023-04-06T15:00:28.707932" hostname="BartonTest">
    <testcase classname="TestAutograd" name="test_access_saved_tensor_twice_without_recomputation_works" time="0.016" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_accumulate_grad" time="0.004" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\autograd\__init__.py:204: UserWarning: Using backward() with create_graph=True will create a reference cycle between the parameter and its gradient which can cause a memory leak. We recommend using autograd.grad when creating the graph to avoid this. If you have to use this function, make sure to reset the .grad fields of your parameters to None after use to break the cycle and avoid the leak. (Triggered internally at C:\Users\radekbarton\Projects\pytorch\torch\csrc\autograd\engine.cpp:1151.)
  Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_accumulate_grad_posthooks_can_observe_tensor_prehook" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_accumulate_grad_tensor_reference" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_accumulate_grad_with_zero_numel_grad" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_anomaly_assign_parent_cleanup" time="0.004" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:4448: UserWarning: Anomaly Detection has been enabled. This mode will increase the runtime and should only be enabled for debugging.
  with detect_anomaly():
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_anomaly_detect_nan" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_anomaly_grad_warnings" time="0.349" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_anomaly_mode_no_check_nan" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_attribute_deletion" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_autograd_inplace_view_of_view" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_autograd_inplace_views_creation_meta" time="0.035" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_autograd_inplace_views_cross_dtype" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_autograd_multiple_views_python" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_autograd_node_isinstance" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_autograd_python_custom_function_inplace" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_autograd_simple_views_python" time="0.099" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_autograd_views_codegen" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_badcalls" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_copy" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_create_graph_warns" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_no_grad" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_twice_retained_graph_with_saved_values" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_twice_retained_graph_without_saved_values" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_twice_with_saved_values" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_twice_without_saved_values" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_with_inputs" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_backward_with_nonleaf_inputs" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_calculate_shape_util" time="0.002" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\nested\__init__.py:58: UserWarning: The PyTorch API of nested tensors is in prototype stage and will change in the near future. (Triggered internally at C:\Users\radekbarton\Projects\pytorch\aten\src\ATen\NestedTensorImpl.cpp:179.)
  return torch._nested_tensor_from_tensor_list(tensor_list, dtype, None, device, None)
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_callback_adds_callback" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_cant_create_saved_tensors" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpoint_valid_reset_on_error" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpointing" time="0.002" file="test_autograd.py">
      <skipped type="pytest.skip" message="test is slow; run with PYTORCH_TEST_WITH_SLOW to enable test">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:5479: test is slow; run with PYTORCH_TEST_WITH_SLOW to enable test</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_checkpointing_non_reentrant_autocast_cpu" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpointing_non_reentrant_autocast_gpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Test requires CUDA bf16 support">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:5542: Test requires CUDA bf16 support</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_arbitrary_input_output" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_correct_grad" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_custom_function_works" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_dataparallel" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_detached_tensor_use_reentrant_False" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_detached_tensor_use_reentrant_True" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_input_requires_grad_False" time="0.002" file="test_autograd.py">
      <skipped type="pytest.skip" message="test is slow; run with PYTORCH_TEST_WITH_SLOW to enable test">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:5709: test is slow; run with PYTORCH_TEST_WITH_SLOW to enable test</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_input_requires_grad_True" time="0.002" file="test_autograd.py">
      <skipped type="pytest.skip" message="test is slow; run with PYTORCH_TEST_WITH_SLOW to enable test">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:5709: test is slow; run with PYTORCH_TEST_WITH_SLOW to enable test</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_memory_savings" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Test requires CUDA">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:5553: Test requires CUDA</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_parameter_used_in_an_out" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_checkpointing_without_reentrant_with_context_fn" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_copy_slices_graph_task_updates" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_create_graph_and_full_backward_hook_cycle" time="0.354" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_current_graph_task_execution_order" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_current_graph_task_id" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_current_node" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_autograd_no_early_free" time="0.015" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_autograd_repeated_grad_grad" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_cycle" time="0.125" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_error" time="0.108" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_exception" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_forward_mode_forward_is_no_op" time="0.015" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_forward_mode_inplace_checks" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_forward_mode_non_differentiable" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_forward_mode_non_tensor_before_tensor_args" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_forward_mode_view_checks" time="0.011" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_forward_mode_wrong_formula" time="0.014" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_local_inplace" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_mark_dirty_not_differentiable" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_no_tensors" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_non_tensor_inputs_outputs" time="0.014" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_return_view_in_nograd" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_save_for_forward" time="0.011" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_saved_tensors" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_setup_context_multi_input" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_setup_context_multi_output" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_setup_context_simple" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_custom_function_vmap_defaults" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_deep_reentrant" time="0.405" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_default_saved_variable_hooks_double_backward" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_dep_nograd" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_dependent_backward" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_detach" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_detach_base" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_detach_then_inplace_raises_in_autograd" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_diagonal_expanded_v" time="0.002" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:2814: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v_expanded = torch.tensor(value).expand(10)
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_dir" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_disabling_saved_tensor_hooks" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_disabling_saved_tensor_hooks_nested" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_dont_materialize_grads" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_duplicate_backward_root" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_first_grad_fn_access_in_no_grad_mode" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_free_deep_graph" time="4.893" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_free_deep_graph_complicated" time="3.550" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_free_deep_graph_pyfunction" time="4.134" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_full_backward_hook_double_backward" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_function" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_function_returns_input" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_function_returns_undefined_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gc_in_destructor" time="0.603" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_badcalls" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_batched_grad" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_empty_inputs" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_fn_attr_bindings" time="0.008" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_fn_badcalls" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_fn_prehooks" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_fn_prehooks_multiple_outputs" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_fn_prehooks_remove_hooks" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_materialize_grads" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_mode_class_decoration" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_mode_restored_reentrant" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_nonleaf" time="0.007" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:797: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at C:\Users\radekbarton\Projects\pytorch\build\aten\src\ATen/core/TensorBody.h:491.)
  self.assertIsNone(x.grad)
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_grad_nonleaf_many_outputs" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_nonleaf_register_hook" time="0.005" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:849: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at C:\Users\radekbarton\Projects\pytorch\build\aten\src\ATen/core/TensorBody.h:491.)
  self.assertIsNone(x_list[0].grad)
C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:856: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at C:\Users\radekbarton\Projects\pytorch\build\aten\src\ATen/core/TensorBody.h:491.)
  self.assertIsNone(x_list[i].grad)
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_grad_unreachable" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_grad_unreachable_discovery" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_backward_mul_by_grad_output" time="0.058" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_check_batched_grad" time="0.043" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_check_forward_or_backward_only" time="0.054" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_check_no_differentiable_outputs" time="0.007" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\autograd\gradcheck.py:739: UserWarning: Input #0 requires gradient and is not a double precision floating point or complex. This check will likely fail if all the inputs are not of double precision floating point or complex. 
  warnings.warn(
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_gradcheck_complex_non_complex_outputs" time="0.023" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_custom_error" time="0.032" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\autograd\gradcheck.py:739: UserWarning: Input #0 requires gradient and is not a double precision floating point or complex. This check will likely fail if all the inputs are not of double precision floating point or complex. 
  warnings.warn(
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_gradcheck_dense_and_sparse_inputs" time="0.013" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_forward_ad" time="0.244" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_forward_ad_batched_grad" time="0.009" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_forward_ad_respects_requires_grad" time="0.013" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_forward_ad_runs_with_no_requires_grad" time="0.012" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_get_analytical_jacobian" time="0.012" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\autograd\gradcheck.py:666: UserWarning: get_analytical_jacobian was part of PyTorch's private API and not meant to be exposed. We are deprecating it and it will be removed in a future version of PyTorch. If you have a specific use for this or feature request for this to be a stable API, please file us an issue at https://github.com/pytorch/pytorch/issues/new
  warnings.warn("get_analytical_jacobian was part of PyTorch's private API and not "
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_gradcheck_get_numerical_jacobian" time="0.012" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\autograd\gradcheck.py:246: UserWarning: get_numerical_jacobian was part of PyTorch's private API and not meant to be exposed. We are deprecating it and it will be removed in a future version of PyTorch. If you have a specific use for this or feature request for this to be a stable API, please file us an issue at https://github.com/pytorch/pytorch/issues/new
  warnings.warn("get_numerical_jacobian was part of PyTorch's private API and not "
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_gradcheck_jacobian_mismatch" time="0.082" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\autograd\gradcheck.py:739: UserWarning: Input #0 requires gradient and is not a double precision floating point or complex. This check will likely fail if all the inputs are not of double precision floating point or complex. 
  warnings.warn(
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_gradcheck_multiple_mkldnn_inputs" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="MKL-DNN build is disabled">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:4977: MKL-DNN build is disabled</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_gradcheck_nondeterministic" time="0.153" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_output_shape_or_dtype_depend_on_values" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_single_input" time="0.023" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_sparse_bsc_input" time="0.064" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:4738: UserWarning: Sparse BSC tensor support is in beta state. If you miss a functionality in the sparse tensor support, please submit a feature request to https://github.com/pytorch/pytorch/issues. (Triggered internally at C:\Users\radekbarton\Projects\pytorch\aten\src\ATen\SparseCsrTensorImpl.cpp:55.)
  gradcheck(fn, torch.rand(4, 8, dtype=torch.double).to_sparse_bsc((2, 2)).requires_grad_(True),
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_gradcheck_sparse_bsr_input" time="0.080" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_sparse_csc_input" time="0.049" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_sparse_csr_input" time="0.029" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_sparse_input" time="0.012" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_test_outputs" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="MKL-DNN build is disabled">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:4820: MKL-DNN build is disabled</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_gradcheck_undefined_grad" time="0.021" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_gradcheck_validates_input_mkldnn" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="MKL-DNN build is disabled">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:4804: MKL-DNN build is disabled</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_gradcheck_validates_inputs" time="0.049" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\autograd\gradcheck.py:739: UserWarning: Input #0 requires gradient and is not a double precision floating point or complex. This check will likely fail if all the inputs are not of double precision floating point or complex. 
  warnings.warn(
c:\users\radekbarton\projects\pytorch\torch\autograd\gradcheck.py:739: UserWarning: Input #0 requires gradient and is not a double precision floating point or complex. This check will likely fail if all the inputs are not of double precision floating point or complex. 
  warnings.warn(
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_graph_save_on_cpu" time="0.015" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_graph_save_on_cpu_cuda" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="test requires CUDA">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:7966: test requires CUDA</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_hessian_vector" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_hook_edge_case_when_called_with_grad" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_hook_none" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_hook_with_no_name" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_hooks" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_hooks_cpp" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_increment_version" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_index_backward_does_not_save_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_indexing" time="0.040" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_indexing_duplicates" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_inplace" time="0.008" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_inplace_not_requires_grad" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_inplace_on_view_backward" time="0.014" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\nn\modules\instancenorm.py:80: UserWarning: input's size at dim=1 does not match num_features. You can silence this warning by not passing in num_features, which is not used because affine=False
  warnings.warn(f"input's size at dim={feature_dim} does not match num_features. "
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_inplace_on_view_leaf_errors" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_inplace_on_view_saved_output" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_inplace_on_view_weak_grad_fn" time="0.091" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_input_buffer_accum" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_integer_outputs" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_invalid_gradients" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_isolated_node" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_leaf_assignment" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_legacy_function_deprecation_exception" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_lobpcg" time="5.255" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_mark_non_differentiable" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_mark_non_differentiable_mixed" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_mark_non_differentiable_none" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_materialize_grads" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_multi_backward" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_multi_backward_no_grad" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_multi_grad_hooks" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_named_tensor_for_complex_views" time="0.003" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\_tensor.py:1122: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at C:\Users\radekbarton\Projects\pytorch\c10/core/TensorImpl.h:1791.)
  return super().refine_names(names)
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_naughty_anomaly_access" time="0.003" file="test_autograd.py">
      <skipped type="pytest.xfail" message="" />
    </testcase>
    <testcase classname="TestAutograd" name="test_naughty_autograd_function_attribute_access" time="0.011" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_naughty_autograd_function_stashing_ctx" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_nested_anomaly_detect_nan" time="0.011" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_nested_anomaly_printstack_cleanup" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_next_functions" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_no_grad" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_no_grad_assignment" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_no_grad_copy" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_no_grad_copy_sparse" time="0.008" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\nn\functional.py:2325: UserWarning: Argument order of nn.functional.embedding_bag was changed. Usage `embedding_bag(weight, input, ...)` is deprecated, and should now be `embedding_bag(input, weight, ...)`.
  warnings.warn(
      </system-err>
    </testcase>
    <testcase classname="TestAutograd" name="test_no_grad_input" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_no_grad_modifies_version" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_no_grad_python_function" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_no_requires_grad_inplace" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_no_unnecessary_save" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_no_unnecessary_unwrapping" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_not_implemented_fwad" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_not_implemented_grad" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_numpy_requires_grad" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_once_differentiable" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_out_variant_raises_when_inputs_require_grad" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_pack_hook_with_inplace_modification_should_fail" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_pickle" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_pow_zero_tensor_gradient" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_power_function" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_prehook_ordering" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_profiler" time="0.154" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_profiler_aggregation_fake" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_profiler_aggregation_lstm" time="2.598" file="test_autograd.py">
      <system-out>
===================================================================================================================================================================
TEST
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
                         Name    Self CPU %      Self CPU   CPU total %     CPU total  CPU time avg    # of Calls                                      Input Shapes  
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
                   aten::lstm         0.81%     345.000us         6.23%       2.652ms       2.652ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.78%     333.000us         5.65%       2.406ms       2.406ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.77%     330.000us         5.52%       2.352ms       2.352ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.66%     282.000us         4.40%       1.873ms       1.873ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.66%     279.000us         4.81%       2.047ms       2.047ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.64%     274.000us         5.46%       2.324ms       2.324ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.59%     253.000us         4.63%       1.973ms       1.973ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.59%     252.000us         4.72%       2.009ms       2.009ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.58%     247.000us         4.90%       2.086ms       2.086ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.57%     241.000us         5.74%       2.443ms       2.443ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
Self CPU time total: 42.591ms

-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
                         Name    Self CPU %      Self CPU   CPU total %     CPU total  CPU time avg    # of Calls                                      Input Shapes  
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
                   aten::lstm        11.87%       5.055ms        98.23%      41.837ms       2.092ms            20      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                  aten::addmm        11.44%       4.874ms        14.32%       6.100ms      30.500us           200                 [[80], [3, 20], [20, 80], [], []]  
               aten::sigmoid_        10.39%       4.425ms        10.39%       4.425ms       7.375us           600                                         [[3, 20]]  
                    aten::mul         9.94%       4.235ms         9.94%       4.235ms       7.058us           600                                [[3, 20], [3, 20]]  
           aten::unsafe_split         5.05%       2.152ms        15.85%       6.750ms      33.750us           200                                 [[3, 80], [], []]  
                  aten::slice         4.55%       1.936ms         6.32%       2.690ms       3.362us           800                         [[3, 80], [], [], [], []]  
                 aten::narrow         4.40%       1.876ms        10.61%       4.517ms       5.646us           800                             [[3, 80], [], [], []]  
                  aten::tanh_         3.76%       1.601ms         3.76%       1.601ms       8.005us           200                                         [[3, 20]]  
                   aten::tanh         3.70%       1.574ms         3.70%       1.574ms       7.870us           200                                         [[3, 20]]  
                   aten::add_         2.97%       1.265ms         2.97%       1.265ms       6.325us           200                            [[3, 80], [3, 80], []]  
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
Self CPU time total: 42.591ms =================================================================================================================================================================== TEST ===================================================================================================================================================================
This report only display top-level ops statistics
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
                         Name    Self CPU %      Self CPU   CPU total %     CPU total  CPU time avg    # of Calls                                      Input Shapes  
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
                   aten::lstm         0.81%     345.000us         6.23%       2.652ms       2.652ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.78%     333.000us         5.65%       2.406ms       2.406ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.77%     330.000us         5.52%       2.352ms       2.352ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.66%     282.000us         4.40%       1.873ms       1.873ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.66%     279.000us         4.81%       2.047ms       2.047ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.64%     274.000us         5.46%       2.324ms       2.324ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.59%     253.000us         4.63%       1.973ms       1.973ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.59%     252.000us         4.72%       2.009ms       2.009ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.58%     247.000us         4.90%       2.086ms       2.086ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                   aten::lstm         0.57%     241.000us         5.74%       2.443ms       2.443ms             1      [[5, 3, 10], [], [], [], [], [], [], [], []]  
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
Self CPU time total: 42.591ms ===================================================================================================================================================================
This report only display top-level ops statistics
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
                         Name    Self CPU %      Self CPU   CPU total %     CPU total  CPU time avg    # of Calls                                      Input Shapes  
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
                   aten::lstm        11.87%       5.055ms        98.23%      41.837ms       2.092ms            20      [[5, 3, 10], [], [], [], [], [], [], [], []]  
                  aten::randn         0.71%     302.000us         1.75%     747.000us      12.450us            60                              [[], [], [], [], []]  
-----------------------------  ------------  ------------  ------------  ------------  ------------  ------------  ------------------------------------------------  
Self CPU time total: 42.591ms

Total time based on python measurements:  48.018ms
CPU time measurement python side overhead: 12.74%
      </system-out>
    </testcase>
    <testcase classname="TestAutograd" name="test_profiler_aggregation_table" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_profiler_function_event_avg" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_profiler_propagation" time="0.098" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_profiler_seq_nr" time="0.008" file="test_autograd.py">
      <system-out>-------------------------------------------------------  ------------  ------------  ------------  ------------  ------------  ------------  
                                                   Name    Self CPU %      Self CPU   CPU total %     CPU total  CPU time avg    # of Calls  
-------------------------------------------------------  ------------  ------------  ------------  ------------  ------------  ------------  
                                              aten::add        18.47%      29.000us        18.47%      29.000us      29.000us             1  
                                              aten::sum        14.65%      23.000us        16.56%      26.000us      26.000us             1  
                                          aten::normal_         9.55%      15.000us         9.55%      15.000us       7.500us             2  
                        torch::autograd::AccumulateGrad         8.92%      14.000us        21.66%      34.000us      17.000us             2  
                                            aten::copy_         8.92%      14.000us         8.92%      14.000us       7.000us             2  
                                            aten::randn         6.37%      10.000us        21.02%      33.000us      16.500us             2  
                                           aten::expand         5.73%       9.000us         6.37%      10.000us      10.000us             1  
                                            aten::empty         5.10%       8.000us         5.10%       8.000us       4.000us             2  
      autograd::engine::evaluate_function: SumBackward1         3.18%       5.000us        12.10%      19.000us      19.000us             1  
                                    aten::empty_strided         2.55%       4.000us         2.55%       4.000us       1.333us             3  
                                           SumBackward1         2.55%       4.000us         8.92%      14.000us      14.000us             1  
      autograd::engine::evaluate_function: AddBackward0         2.55%       4.000us         3.18%       5.000us       5.000us             1  
                                aten::new_empty_strided         2.55%       4.000us         3.82%       6.000us       3.000us             2  
                                       aten::as_strided         1.91%       3.000us         1.91%       3.000us       1.500us             2  
                                        aten::ones_like         1.91%       3.000us         5.10%       8.000us       8.000us             1  
                                       aten::empty_like         1.91%       3.000us         3.18%       5.000us       5.000us             1  
autograd::engine::evaluate_function: torch::autograd...         1.91%       3.000us        23.57%      37.000us      18.500us             2  
                                            aten::fill_         0.64%       1.000us         0.64%       1.000us       0.500us             2  
                                           AddBackward0         0.64%       1.000us         0.64%       1.000us       1.000us             1  
-------------------------------------------------------  ------------  ------------  ------------  ------------  ------------  ------------  
Self CPU time total: 157.000us

      </system-out>
    </testcase>
    <testcase classname="TestAutograd" name="test_profiler_shapes" time="0.008" file="test_autograd.py">
      <system-out>
----------------------  ------------  ------------  ------------  ------------  ------------  ------------  ---------------------------------------  
                  Name    Self CPU %      Self CPU   CPU total %     CPU total  CPU time avg    # of Calls                             Input Shapes  
----------------------  ------------  ------------  ------------  ------------  ------------  ------------  ---------------------------------------  
          aten::linear         4.33%      26.000us        48.59%     292.000us     292.000us             1              [[128, 20], [30, 20], [30]]  
               aten::t         8.32%      50.000us        10.82%      65.000us      65.000us             1                               [[30, 20]]  
       aten::transpose         1.66%      10.000us         2.50%      15.000us      15.000us             1                       [[30, 20], [], []]  
      aten::as_strided         0.83%       5.000us         0.83%       5.000us       5.000us             1                   [[30, 20], [], [], []]  
           aten::addmm        29.45%     177.000us        33.44%     201.000us     201.000us             1      [[30], [128, 20], [20, 30], [], []]  
          aten::expand         0.67%       4.000us         0.67%       4.000us       4.000us             1                           [[30], [], []]  
      aten::as_strided         0.17%       1.000us         0.17%       1.000us       1.000us             1                       [[30], [], [], []]  
           aten::copy_         3.16%      19.000us         3.16%      19.000us      19.000us             1               [[128, 30], [128, 30], []]  
    aten::resolve_conj         0.00%       0.000us         0.00%       0.000us       0.000us             1                              [[128, 30]]  
    aten::resolve_conj         0.00%       0.000us         0.00%       0.000us       0.000us             1                              [[128, 20]]  
          aten::linear         0.83%       5.000us        51.41%     309.000us     309.000us             1              [[128, 30], [40, 30], [40]]  
               aten::t         1.33%       8.000us         2.33%      14.000us      14.000us             1                               [[40, 30]]  
       aten::transpose         0.67%       4.000us         1.00%       6.000us       6.000us             1                       [[40, 30], [], []]  
      aten::as_strided         0.33%       2.000us         0.33%       2.000us       2.000us             1                   [[40, 30], [], [], []]  
           aten::addmm        45.92%     276.000us        48.25%     290.000us     290.000us             1      [[40], [128, 30], [30, 40], [], []]  
          aten::expand         0.67%       4.000us         0.83%       5.000us       5.000us             1                           [[40], [], []]  
      aten::as_strided         0.17%       1.000us         0.17%       1.000us       1.000us             1                       [[40], [], [], []]  
           aten::copy_         1.50%       9.000us         1.50%       9.000us       9.000us             1               [[128, 40], [128, 40], []]  
    aten::resolve_conj         0.00%       0.000us         0.00%       0.000us       0.000us             1                              [[128, 40]]  
    aten::resolve_conj         0.00%       0.000us         0.00%       0.000us       0.000us             1                              [[128, 30]]  
----------------------  ------------  ------------  ------------  ------------  ------------  ------------  ---------------------------------------  
Self CPU time total: 601.000us

      </system-out>
    </testcase>
    <testcase classname="TestAutograd" name="test_profiler_unboxed_only" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_pynode_destruction_deadlock" time="2.585" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_record_function" time="0.008" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_record_function_callbacks" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_record_function_legacy" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_record_function_multithreaded" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_reentrant_child_error" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_reentrant_priority" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_reentrant_with_callbacks_both_depths" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_reentrant_with_callbacks_depth_0" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_reentrant_with_callbacks_depth_1" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_reentrant_with_leaf_variable_hook" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_reentrant_with_non_leaf_variable_hook" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_requires_grad" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_requires_grad_" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_requires_grad_inplace" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_retain_grad" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_retain_grad_cycle" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_retain_grad_inplace" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_retain_grad_inplace_over_view" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_retains_grad_can_always_observe_tensor_prehook" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_retains_grad_inplace_multiple_outputs" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_return_duplicate" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_return_duplicate_inplace" time="0.008" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_return_leaf" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_return_leaf_inplace" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_save_none_for_backward" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_save_on_cpu_and_checkpoint" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_save_output_nr" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_saved_tensor_hooks_custom_error_propagaation" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_saved_variable_packing_unpacking_did_not_save_original_with_default_hooks" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_saved_variable_packing_unpacking_did_not_save_original_with_hooks" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_saved_variable_packing_unpacking_saved_original_with_default_hooks" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_saved_variable_packing_unpacking_saved_original_with_hooks" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_saved_variable_saved_original_inplace_detach" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_saved_variable_version_counter" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_saved_variables_deprecated" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_saving_variable_to_disk" time="0.022" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_select_expanded_v" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_select_sum" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_data_preserve_pyobj" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_data_self_requires_grad" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_data_tensorimpl_type" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_grad_coroutines" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_grad_coroutines_benign_exceptions" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_grad_coroutines_critical_exceptions" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_grad_coroutines_exit" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_grad_enabled" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_grad_generator_functions" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_set_grad_generator_functions_recursive" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_setitem" time="0.020" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_setitem_mask" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_setting_default_saved_variable_hooks_twice_should_not_fail" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_setting_default_saved_variable_hooks_twice_should_use_inner" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_shape" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_sharded_grad" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_simple_reentrant" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_slice_expanded_v" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_sparse_gather_both_scalar" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_sparse_gather_dim0" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_sparse_gather_dim1" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_sparse_gather_dim_neg" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_sparse_gather_ind_scalar" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_sparse_gather_x_scalar" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_sparse_mm_backward" time="0.014" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_tensor_grad_warnings" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_tensor_hooks_inplace" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_tensor_hooks_inplace_multiple_outputs" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_tensor_hooks_inplace_over_view" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_thread_shutdown" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Skipping because doesn't work for windows">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:5374: Skipping because doesn't work for windows</skipped>
    </testcase>
    <testcase classname="TestAutograd" name="test_to_sparse_backward" time="0.047" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_too_many_grads" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_type_conversions" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_unrelated_inputs" time="0.012" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_unsafe_set_version_counter" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_unused_output" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_var_mean_differentiable" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_variable_traverse" time="0.104" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_version_counter" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_view_func_replay" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_view_replay_enabled" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_volatile_deprecated" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_will_engine_execute_node" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutograd" name="test_wrapped_number_saved_variable_hooks" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardModeBatchedGrad" name="test_inplace_on_view_not_same_layout" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardModeBatchedGrad" name="test_inplace_on_view_same_layout" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardModeBatchedGrad" name="test_metadata_check_for_storage_numel_skipped" time="0.002" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:8195: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  self.assertEqual(len(primal.storage()), 5)
      </system-err>
    </testcase>
    <testcase classname="TestAutogradForwardModeBatchedGrad" name="test_out_of_place_basic" time="0.012" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardModeBatchedGrad" name="test_out_of_place_not_same_layout" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_advanced_packing_unpacking" time="0.004" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:8571: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  self.assertEqual(dual.storage().data_ptr(), foo.storage().data_ptr())
C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:8580: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  self.assertEqual(dual_primal.storage().data_ptr(), foo.storage().data_ptr())
C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:8581: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  self.assertEqual(dual_tangent.storage().data_ptr(), bar.storage().data_ptr())
      </system-err>
    </testcase>
    <testcase classname="TestAutogradForwardMode" name="test_backward_graph_destruction" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_basic_packing_unpacking" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_codegen_ignores_undefined_outputs" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_create_new_zeros_with_same_meta" time="0.013" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:8830: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  self.assertEqual(len(result.storage()), len(target.storage()) * prod_of_t_bdims)
      </system-err>
    </testcase>
    <testcase classname="TestAutogradForwardMode" name="test_default_level" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_detach_view_tracking" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_forward_level_cleanup" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_fwd_grad_enabled" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_grad_cleanup" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_make_dual_forbid_integral_dtype" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_make_dual_inference_tensor_in_inference_mode" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_make_dual_torch_dispatch" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_metadata_check_check_conj" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_metadata_check_checks_ignores_size_zero" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_metadata_check_checks_storage_numel" time="0.003" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:8269: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  self.assertEqual(len(primal.storage()), 5)
      </system-err>
    </testcase>
    <testcase classname="TestAutogradForwardMode" name="test_metadata_check_ignore_storage_offset_for_zero_numel_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_metadata_check_when_primal_has_conj_bit" time="0.002" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:8305: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  self.assertEqual(len(a.storage()), len(b.storage()))
      </system-err>
    </testcase>
    <testcase classname="TestAutogradForwardMode" name="test_metadata_check_when_primal_has_neg_bit" time="0.002" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:8320: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  self.assertEqual(len(a.storage()), len(b.storage()))
      </system-err>
    </testcase>
    <testcase classname="TestAutogradForwardMode" name="test_nested_level" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_non_differentiable" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_out_variant" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_print" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_set_fw_grad_having_own_fw_grad_at_same_level" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_set_fwd_grad_enabled" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_size_check" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_view_inplace_always_creates_a_view" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_view_inplace_differentiable_views" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradForwardMode" name="test_view_inplace_non_differentiable_views" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_backward_out_of_context" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_basic" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_disallow_nesting" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_double_backward" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_save_base_and_modify_view" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_save_view_modify_base" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_saved_but_not_anymore" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_saved_same_tensor_different_versions" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_saved_same_tensor_many_times" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_views" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_with_math_views" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAllowMutationOnSaved" name="test_with_out_variant" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_context_manager" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_decorator" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_existing_autograd_session" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_handle_direct_view_on_rebase" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_handle_indirect_view_on_rebase" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_inf_tensor_in_inf_mode_functional_op" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_inf_tensor_in_inf_mode_inplace_op" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_inf_tensor_in_inf_mode_view_op" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_inf_tensor_in_normal_mode_functional_op" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_inf_tensor_in_normal_mode_inplace_op" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_inf_tensor_in_normal_mode_view_op" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_inference_mode_tensor_creation" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_mix_inference_and_normal_tensor_functional_op" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_mix_inference_and_normal_tensor_inplace_op" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_mix_inference_and_normal_tensor_view_op" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_normal_tensor_inplace_output_in_inference_mode" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_normal_tensor_inplace_output_in_normal_mode" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_normal_tensor_view_output_in_inference_mode" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradInferenceMode" name="test_normal_tensor_view_output_in_normal_mode" time="0.002" file="test_autograd.py" />
    <testcase classname="TestMultithreadAutograd" name="test_cat_stack_r_to_c" time="0.214" file="test_autograd.py" />
    <testcase classname="TestMultithreadAutograd" name="test_dataparallel_saved_tensors_hooks" time="0.002" file="test_autograd.py" />
    <testcase classname="TestMultithreadAutograd" name="test_fork_join_in_middle" time="0.021" file="test_autograd.py" />
    <testcase classname="TestMultithreadAutograd" name="test_multi_grad_hooks" time="0.006" file="test_autograd.py" />
    <testcase classname="TestMultithreadAutograd" name="test_multithreaded_exception_propagation" time="0.003" file="test_autograd.py" />
    <testcase classname="TestMultithreadAutograd" name="test_preserve_backtrace" time="0.002" file="test_autograd.py" />
    <testcase classname="TestMultithreadAutograd" name="test_python_thread_in_middle" time="0.005" file="test_autograd.py" />
    <testcase classname="TestMultithreadAutograd" name="test_simple_backward" time="0.007" file="test_autograd.py" />
    <testcase classname="TestMultithreadAutograd" name="test_simple_backward_same_input" time="0.011" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_early_stop_False" time="0.278" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_early_stop_True" time="0.113" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_kwargs_early_stop_False" time="0.002" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_kwargs_early_stop_True" time="0.002" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_non_tensor_inputs_and_outputs_early_stop_False" time="0.002" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_non_tensor_inputs_and_outputs_early_stop_True" time="0.002" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_reentrant_backwards_early_stop_False" time="0.002" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_reentrant_backwards_early_stop_True" time="0.002" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_same_graph_early_stop_False" time="0.002" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_same_graph_early_stop_True" time="0.002" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_two_children_early_stop_False" time="0.021" file="test_autograd.py" />
    <testcase classname="TestNestedCheckpoint" name="test_nested_checkpoint_two_children_early_stop_True" time="0.019" file="test_autograd.py" />
    <testcase classname="TestAutogradComplex" name="test_view_func_for_complex_views" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradComplex" name="test_view_with_multi_output" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_construct_standard_basis_for_base_tensor" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_construct_standard_basis_for_cuda_base_tensor" time="0.000" file="test_autograd.py">
      <skipped type="pytest.skip" message="test requires CUDA">C:\Users\radekbarton\Projects\pytorch\test\autograd\test_functional.py:504: test requires CUDA</skipped>
    </testcase>
    <testcase classname="TestAutogradFunctional" name="test_construct_standard_basis_for_cuda_logging_tensor" time="0.000" file="test_autograd.py">
      <skipped type="pytest.skip" message="test requires CUDA">C:\Users\radekbarton\Projects\pytorch\test\autograd\test_functional.py:504: test requires CUDA</skipped>
    </testcase>
    <testcase classname="TestAutogradFunctional" name="test_construct_standard_basis_for_logging_tensor" time="0.017" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_create_graph_vectorize_False_base_tensor" time="0.241" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_create_graph_vectorize_False_logging_tensor" time="1.302" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_create_graph_vectorize_True_base_tensor" time="0.123" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_create_graph_vectorize_True_logging_tensor" time="0.560" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_err_check_strict_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_err_check_strict_logging_tensor" time="0.011" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_err_check_strict_vectorize_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_err_check_strict_vectorize_logging_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_err_check_vectorize_False_base_tensor" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_err_check_vectorize_False_logging_tensor" time="0.021" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_err_check_vectorize_True_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_err_check_vectorize_True_logging_tensor" time="0.010" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_match_vhp_hvp_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_match_vhp_hvp_logging_tensor" time="0.013" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_no_grad_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_no_grad_logging_tensor" time="0.014" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_output_base_tensor" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_output_logging_tensor" time="0.019" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_output_vectorized_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_output_vectorized_logging_tensor" time="0.009" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_scalar_vectorize_False_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_scalar_vectorize_False_logging_tensor" time="0.013" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_scalar_vectorize_True_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_scalar_vectorize_True_logging_tensor" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_vectorize_correctness_multi_input_base_tensor" time="0.026" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_vectorize_correctness_multi_input_logging_tensor" time="0.176" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_vectorize_correctness_simple_base_tensor" time="0.016" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_vectorize_correctness_simple_logging_tensor" time="0.056" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_vectorize_correctness_unrelated_outputs_base_tensor" time="0.011" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_vectorize_correctness_unrelated_outputs_logging_tensor" time="0.047" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_vectorize_raises_no_warnings_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hessian_vectorize_raises_no_warnings_logging_tensor" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_create_graph_base_tensor" time="0.150" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_create_graph_logging_tensor" time="0.688" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_err_check_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_err_check_logging_tensor" time="0.010" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_err_check_strict_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_err_check_strict_logging_tensor" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_no_grad_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_no_grad_logging_tensor" time="0.010" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_output_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_output_logging_tensor" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_scalar_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_hvp_scalar_logging_tensor" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_create_graph_vectorize_False_base_tensor" time="0.099" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_create_graph_vectorize_False_logging_tensor" time="0.489" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_create_graph_vectorize_True_base_tensor" time="0.077" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_create_graph_vectorize_True_logging_tensor" time="0.338" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_err_check_strict_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_err_check_strict_logging_tensor" time="0.010" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_err_check_strict_vectorize_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_err_check_strict_vectorize_logging_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_err_check_vectorize_False_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_err_check_vectorize_False_logging_tensor" time="0.010" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_err_check_vectorize_True_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_err_check_vectorize_True_logging_tensor" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_match_vjp_jvp_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_match_vjp_jvp_logging_tensor" time="0.012" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_no_grad_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_no_grad_logging_tensor" time="0.008" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_output_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_output_logging_tensor" time="0.012" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_output_vectorized_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_output_vectorized_logging_tensor" time="0.008" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_scalar_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_scalar_logging_tensor" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_scalar_vectorized_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_scalar_vectorized_logging_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_different_devices_base_tensor" time="0.000" file="test_autograd.py">
      <skipped type="pytest.skip" message="test requires CUDA">C:\Users\radekbarton\Projects\pytorch\test\autograd\test_functional.py:771: test requires CUDA</skipped>
    </testcase>
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_different_devices_logging_tensor" time="0.000" file="test_autograd.py">
      <skipped type="pytest.skip" message="test requires CUDA">C:\Users\radekbarton\Projects\pytorch\test\autograd\test_functional.py:771: test requires CUDA</skipped>
    </testcase>
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_different_dtype_base_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_different_dtype_logging_tensor" time="0.015" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_multi_input_base_tensor" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_multi_input_logging_tensor" time="0.025" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_multi_input_multi_output_base_tensor" time="0.016" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_multi_input_multi_output_logging_tensor" time="0.086" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_simple_base_tensor" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_simple_logging_tensor" time="0.030" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_unrelated_outputs_base_tensor" time="0.008" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_unrelated_outputs_logging_tensor" time="0.032" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_zero_dim_base_tensor" time="0.011" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_correctness_zero_dim_logging_tensor" time="0.053" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_raises_no_warnings_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jacobian_vectorize_raises_no_warnings_logging_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_create_graph_base_tensor" time="0.115" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_create_graph_logging_tensor" time="0.500" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_err_check_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_err_check_logging_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_err_check_strict_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_err_check_strict_logging_tensor" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_no_grad_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_no_grad_logging_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_output_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_output_logging_tensor" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_scalar_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_jvp_scalar_logging_tensor" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_create_graph_base_tensor" time="0.149" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_create_graph_logging_tensor" time="0.624" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_err_check_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_err_check_logging_tensor" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_err_check_strict_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_err_check_strict_logging_tensor" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_no_grad_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_no_grad_logging_tensor" time="0.009" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_output_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_output_logging_tensor" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_scalar_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vhp_scalar_logging_tensor" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_create_graph_base_tensor" time="0.104" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_create_graph_logging_tensor" time="0.451" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_err_check_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_err_check_logging_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_err_check_strict_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_err_check_strict_logging_tensor" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_no_grad_base_tensor" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_no_grad_logging_tensor" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_output_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_output_logging_tensor" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_scalar_base_tensor" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradFunctional" name="test_vjp_scalar_logging_tensor" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_advanced_indexing_backwards_large_cpu" time="0.002" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9111: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_advanced_indexing_backwards_memory_format_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_backward_device_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="fewer than 2 devices detected">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9345: fewer than 2 devices detected</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_complex_scalar_backward_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_copy__cpu" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_copy_forward_ad_broadcasting_cpu" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_copy_forward_ad_same_layout_copies_grad_cpu" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_copy_r_to_c_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_cross_device_reentrant_autograd_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9443: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_free_unneeded_tensor_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9227: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_grad_assignment_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_gradcheck_input_output_different_device_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9673: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_multiple_output_view_of_view_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_backprop_base_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_backprop_view_cpu" time="0.001" file="test_autograd.py">
      <system-err>C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9580: UserWarning: The .grad attribute of a Tensor that is not a leaf Tensor is being accessed. Its .grad attribute won't be populated during autograd.backward(). If you indeed want the .grad field to be populated for a non-leaf Tensor, use .retain_grad() on the non-leaf Tensor. If you access the non-leaf Tensor by mistake, make sure you access the leaf Tensor instead. See github.com/pytorch/pytorch/pull/30531 for more informations. (Triggered internally at C:\Users\radekbarton\Projects\pytorch\build\aten\src\ATen/core/TensorBody.h:491.)
  self.assertIsNone(a.grad)
      </system-err>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_backprop_view_of_view_cpu" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_gradcheck_cpu" time="0.017" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_makes_base_require_grad_cpu" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_modify_base_cpu" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_multi_output_safe_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_multi_output_unsafe_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_multiple_outputs_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_non_contig_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_of_multiple_output_view_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_of_view_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_python_cpu" time="0.016" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inplace_on_view_then_no_grad_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_inputbuffer_add_multidevice_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="fewer than 2 devices detected">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9364: fewer than 2 devices detected</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_min_max_median_backprops_to_all_values_cpu" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_mv_grad_stride_0_cpu" time="0.007" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_non_differentiable_ops_cpu" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_parameter_resize_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_pin_memory_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9242: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_pow_real_negative_base_complex_exponent_cpu" time="0.012" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_profiler_emit_itt_cpu" time="0.000" file="test_autograd.py">
      <skipped type="pytest.skip" message="ITT is required">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9274: ITT is required</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_profiler_emit_nvtx_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9251: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_pyscalar_conversions_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_reentrant_parent_error_on_cpu_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9167: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_requires_grad_factory_cpu_float32" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_requires_grad_factory_cpu_float64" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_resize_version_bump_cpu" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_rnn_backward_to_input_but_not_parameters_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9262: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_scatter_index_reduce_amin_amax_backprops_to_all_values_cpu" time="0.010" file="test_autograd.py">
      <system-err>c:\users\radekbarton\projects\pytorch\torch\autograd\gradcheck.py:1545: UserWarning: index_reduce() is in beta and the API may change at any time. (Triggered internally at C:\Users\radekbarton\Projects\pytorch\aten\src\ATen\native\TensorAdvancedIndexing.cpp:1110.)
  func_out = func(*tupled_inputs)
      </system-err>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_scatter_index_reduce_prod_gradgrad_error_cpu" time="0.017" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_set_requires_grad_only_for_floats_cpu_float32" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_set_requires_grad_only_for_floats_cpu_float64" time="0.001" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_set_requires_grad_only_for_floats_cpu_int16" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_set_requires_grad_only_for_floats_cpu_int32" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_set_requires_grad_only_for_floats_cpu_int64" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_set_requires_grad_only_for_floats_cpu_int8" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_simple_reentrant_cross_device_cpu" time="0.001" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9404: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_sparse_backward_cpu_complex128" time="0.005" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_sparse_backward_cpu_float64" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_sparse_ctor_getter_backward_cpu_complex128" time="0.064" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_sparse_ctor_getter_backward_cpu_float64" time="0.030" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_sparse_mask_autograd_cpu" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_strided_leaf_grad_layout_cpu" time="0.008" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_to_r_to_c_cpu" time="0.003" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_unused_output_device_cpu" time="0.002" file="test_autograd.py">
      <skipped type="pytest.skip" message="fewer than 2 devices detected">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:9336: fewer than 2 devices detected</skipped>
    </testcase>
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_warning_in_backward_cpu" time="0.006" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_where_functional_cpu" time="0.019" file="test_autograd.py" />
    <testcase classname="TestAutogradDeviceTypeCPU" name="test_where_scalar_cpu" time="0.017" file="test_autograd.py" />
    <testcase classname="TestAutogradMultipleDispatchCPU" name="test_autograd_composite_implicit_and_dispatch_registration_cpu" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradMultipleDispatchCPU" name="test_autograd_multiple_dispatch_registrations_cpu" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradMultipleDispatchCPU" name="test_backward_single_threaded_cpu" time="0.002" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:10986: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradMultipleDispatchCPU" name="test_backward_tls_stash_cpu" time="0.002" file="test_autograd.py">
      <skipped type="pytest.skip" message="Only runs on cuda">C:\Users\radekbarton\Projects\pytorch\test\test_autograd.py:11013: Only runs on cuda</skipped>
    </testcase>
    <testcase classname="TestAutogradMultipleDispatchCPU" name="test_foward_mode_AD_cpu" time="0.002" file="test_autograd.py" />
    <testcase classname="TestAutogradMultipleDispatchCPU" name="test_per_dispatch_key_input_saving_cpu" time="0.004" file="test_autograd.py" />
    <testcase classname="TestAutogradMultipleDispatchCPU" name="test_view_copy_cpu" time="0.004" file="test_autograd.py" />
  </testsuite>
</testsuites>